import React, { useState, useCallback, useEffect } from 'react';
import { View, ScrollView, Text, Image, Button, RefreshControl } from 'react-native';
import { Rating } from 'react-native-elements';
import { PageHeader } from '../components/PageHeader';
import Constants from 'expo-constants';
import CalendarHeatmap from 'react-native-calendar-heatmap';

/**
 *
 * Show the user's detail information by sending post request and fetch the user data from the server.
 *
 * @export
 * @param {{route: {params: {userUID: number}}, navigation: Object}} props <br>
 * 1. props.route.params.userUID is used to send post request to the server to acquire the user information.
 * 2. props.navigation is generated by the stack navigator in React-Navigation used to redirect to other pages.
 * @return {Component} => Render a UserDetailPage to show the details of the user with the given userUID.
 */
export function UserDetailPage(props) {
    const {userUID} = props.route.params;
    const [user, setUser] = useState();
    const [refreshing, setRefreshing] = React.useState(false);

    useEffect(() => {
      getUser(userUID).then((newUser) => {
        setUser(newUser);
      })
    }, [])

    const wait = useCallback((timeout) => {
      return new Promise(resolve => {
        setTimeout(resolve, timeout);
      });
    }, []);
    

    const onRefresh = useCallback(() => {
      getUser(userUID).then((newUser) => {
        setUser(newUser);
      })
      setRefreshing(true);
      wait(2000).then(() => setRefreshing(false));
    }, []);

    useEffect(() => {
      setRefreshing(true);
      wait(2000).then(() => setRefreshing(false));
    }, [])

    if(user) {
        //Need to get user by userUID from server
        //and render corresponding information
      return (
        <View style={{flex: 1, justifyContent: 'flex-start', backgroundColor: 'white'}}>
            <PageHeader 
              leftComp={<Button title='Back' onPress={() => props.navigation.goBack()} />}
              centerComp={<Text style={{fontSize:20}}>Details</Text>}
            />
            <ScrollView 
              contentContainerStyle={{paddingBottom:Constants.statusBarHeight, top:10}}
              refreshControl={
                <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
              }
            >
              <View style={{borderBottomWidth: 1, borderBottomColor: '#D3D3D3', flexDirection: "column", justifyContent:'space-around'}}>
                  <Image source={{
                      uri: user.avatar
                  }} style={{width:150, height:150, borderRadius:25, alignSelf:"center"}}/>
                  <Text style={{fontSize:25, alignSelf: 'center'}}>{user.name}</Text>
              </View>
              <View style={{borderBottomWidth: 12, borderBottomColor: '#D3D3D3', flexDirection:'row', justifyContent:'space-around'}}>
                <View style={{alignSelf:'flex-end', padding:5}}>
                  <Rating
                    type='heart'
                    readonly
                    ratingCount={5}
                    imageSize={18}
                    fractions={1}
                    startingValue={user.rating}
                    showRating
                    showReadOnlyText={false}
                  />
                </View>
                <View style={{justifyContent: "center"}}>
                  <Text style={{ fontSize: 20, textAlign: 'center'}}>üëèüèª {user.coins}</Text>
                </View>
              </View>
              <View style={{top:5, borderBottomWidth: 1, borderBottomColor: '#D3D3D3'}}>
                <Text style={{fontSize:25, padding: 10}}>Contributions</Text>
              </View>
              <View style={{top:10, borderBottomWidth: 12, borderBottomColor: '#D3D3D3'}}>
                <CalendarHeatmap
                  endDate={new Date()}
                  numDays={120}
                  colorArray={["#eee", "#5099E1", "#5099E1", "#5099E1", "#5099E1"]}
                  values={user.contributions}
                />
              </View>
              <View style={{top:10, borderBottomWidth: 12, borderBottomColor: '#D3D3D3'}}>
                <Text style={{fontSize:25, padding: 10, borderBottomWidth: 0.5}}>Publish Tasks</Text>
            <Text style={{fontSize:25, padding: 10, borderBottomWidth: 0.5}}>{user.publish_count}</Text>
              </View>
              <View style={{top:10, borderBottomWidth: 12, borderBottomColor: '#D3D3D3'}}>
                <Text style={{fontSize:25, padding: 10, borderBottomWidth: 0.5}}>Finish Tasks</Text>
                <Text style={{fontSize:25, padding: 10, borderBottomWidth: 0.5}}>{user.finish_count}</Text>
              </View>
            </ScrollView>

        </View>
      );
  }
  else {
    return (
      <View style={{flex: 1, justifyContent: 'flex-start', backgroundColor: 'white'}}>
            <PageHeader 
              leftComp={<Button title='Back' onPress={() => props.navigation.goBack()} />}
              centerComp={<Text style={{fontSize:20}}>Details</Text>}
            />
      <ScrollView 
              contentContainerStyle={{top: Constants.statusBarHeight, paddingBottom:Constants.statusBarHeight, top:10}}
              refreshControl={
                <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
              }
            >
      
      </ScrollView>
      </View>
    )
  }
}

/**
 *
 * Send a post request to the sever to acquire the user object by userUID.
 *
 * @param {number} userUID
 * @return {{user: Object}} 
 */
async function getUser(userUID) {
  let user = null;
  await fetch('http://34.94.101.183/WeHelp/', {
        method: 'POST',
        body: JSON.stringify({
            func: 'getUser', UID: userUID
        })
        }).then(async (resp) => {
        let found = await resp.json();
        // console.log(found)
        //alert(found['chatList'])
        if (found['success'] != 0) {
            if (found['avatar'].startsWith('media')){
                found['avatar'] = 'http://34.94.101.183/' + found['avatar'];
            }
            found['contributions'].forEach((the_date, i) => {
              found['contributions'][i] = {date: the_date};
            });
            user = found;
        }
        else {
            alert("ERROR: can not find user"+props.task['publisherUID']);a
            return;
        }
    }) 
  // console.log(user);
  return user;
}